{
  
    
        "post0": {
            "title": "Title",
            "content": "Weather Prediction by Numerical Python . In 1922 Lewis Fry Richardson published a book that for the first time described how the dynamical processes in the atmosphere could be described with differential equations and solved using numerical methods. At that time computers did not exist and all the calculations had to be solved by hand. Nowadays, some of the largest computers in the world are dedicated to solve these same equations at speeds that Richardson could never have imagined. . This course offers an introduction to numerical simulation using Richardson&#39;s book to ilustrate the fundamentals of weather forecasting and Python, to learn how these equations can be implemented and solved. . Barotropic model . The initial pressure situation chosen by Richardson to demostrate a bartropic model is a zonal wavenumber one perturbation given by: . $$p_s=10^4 sin^2 phi :cos phi :sin lambda$$ . This equation represents the change in the surface pressure field as function of latitude $ phi$ and longitude $ lambda$. . %matplotlib notebook from mpl_toolkits.mplot3d import Axes3D import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_subplot(111, projection=&#39;3d&#39;) x =[1,2,3,4,5,6,7,8,9,10] y =[5,6,2,3,13,4,1,2,4,8] z =[2,3,3,3,5,7,9,11,9,10] ax.scatter(x, y, z, c=&#39;r&#39;, marker=&#39;o&#39;) ax.set_xlabel(&#39;X Label&#39;) ax.set_ylabel(&#39;Y Label&#39;) ax.set_zlabel(&#39;Z Label&#39;) plt.show() . import matplotlib.pyplot as plt from matplotlib import cm, colors from mpl_toolkits.mplot3d import Axes3D import numpy as np from scipy.special import sph_harm phi = np.linspace(0, np.pi, 100) theta = np.linspace(0, 2*np.pi, 100) phi, theta = np.meshgrid(phi, theta) # The Cartesian coordinates of the unit sphere x = np.sin(phi) * np.cos(theta) y = np.sin(phi) * np.sin(theta) z = np.cos(phi) m, l = 2, 3 # Calculate the spherical harmonic Y(l,m) and normalize to [0,1] fcolors = sph_harm(m, l, theta, phi).real fmax, fmin = fcolors.max(), fcolors.min() fcolors = (fcolors - fmin)/(fmax - fmin) # Set the aspect ratio to 1 so our sphere looks spherical fig = plt.figure(figsize=plt.figaspect(1.)) ax = fig.add_subplot(111, projection=&#39;3d&#39;) ax.plot_surface(x, y, z, rstride=1, cstride=1, facecolors=cm.seismic(fcolors)) # Turn off the axis planes #ax.set_axis_off() plt.show() . %matplotlib inline from IPython.display import Markdown as md import numpy as np from matplotlib import pyplot as plt ϕ = np.linspace(90,-90,181) λ = np.linspace(-180,180,361) λλ, ϕϕ = np.meshgrid(np.radians(λ),np.radians(ϕ)) ps = 10e4*np.square(np.sin(ϕϕ))*np.cos(ϕϕ)*np.sin(λλ) ps = 10e4*(np.sin(ϕϕ)**2)*np.cos(ϕϕ)*np.sin(λλ) plt.figure(figsize=(12,6)) plt.contourf(λ,ϕ,ps, cmap=&#39;coolwarm_r&#39;) plt.colorbar() . &lt;matplotlib.colorbar.Colorbar at 0x7f8e569cc6a0&gt; . max_ϕi, max_λi = np.unravel_index(np.argmax(ps, axis=None), ps.shape) md(f&quot;This image represents two low pressure systems, centered on the western part of each hemisphere and two low pressure systems on the eastern half of the world. maxima of magnitude {ps.max()/1000:.1f} hPa at {λ[max_λi]} East and {ϕ[max_ϕi]} North and South, and corresponding minima in the western hemisphere at the antipodes of the maxima.&quot;) . This image represents two low pressure systems, centered on the western part of each hemisphere and two low pressure systems on the eastern half of the world. maxima of magnitude 38.5 hPa at 90.0 East and 55.0 North and South, and corresponding minima in the western hemisphere at the antipodes of the maxima. . $$U=-10^4 frac{h}{2 Omega a} (2sin^2 phi-cos^2 phi) :sin lambda$$ $$V=10^4 frac{h}{2 Omega a} sin phi :cos lambda$$ . plt.figure(figsize=(12,6)) #plt.contourf(λ,ϕ,(2*np.square(np.sin(ϕϕ))-np.square(np.cos(ϕϕ)))*np.sin(λλ), cmap=&#39;coolwarm_r&#39;) plt.contourf(λ,ϕ,-(2*(np.sin(ϕϕ)**2))-(np.cos(ϕϕ)**2), cmap=&#39;coolwarm_r&#39;) plt.colorbar() print(-10e4*(h/(Ω2*a))) . -990917.9336159385 . h = 9200 # Earth&#39;s angular velocity Ω2 = 1.458423e-4 # Earth&#39;s radius a = 6.366e6 U = -10e4*(h/(Ω2*a))*((2*np.square(np.sin(ϕϕ)))-np.square(np.cos(ϕϕ)))*np.sin(λλ) #U = 2*np.square(np.sin(ϕϕ))-np.square(np.cos(ϕϕ))*np.sin(λλ) plt.figure(figsize=(12,6)) plt.contourf(λ,ϕ,U, cmap=&#39;coolwarm_r&#39;) plt.colorbar() print(U.min(),U.argmax(), U.shape) np.unravel_index(np.argmax(U, axis=None), U.shape) . -1981835.867231877 90 (181, 361) . (0, 90) . To compute the tendency, we need the divergence on the black squares. For this, we require the zonal wind in the white squares to the east and west, and the meridional wind in the white squares to the north and south of each black square. . $$ frac{ partial P}{ partial t} + gh nabla cdot V = 0$$ . $$ frac{ partial P}{ partial t} + frac{gh}{a :cos phi} left( frac{ Delta U}{ Delta lambda}+ frac{ Delta (V cos phi)}{ Delta phi} right)=0$$ . g = 9.79 # Earth&#39;s angular velocity Ω = 1.458423e-4/2 # Earth&#39;s radius a = 6.366e6 λ0 = 0 ϕ0 = 50.4 Δλ = 5.625 Δϕ = 3.6 Δt = 2700 #3/4 hour ϕ = np.radians(np.array([ϕ0+Δϕ/2, ϕ0, ϕ0-Δϕ/2])) cosϕ = np.cos(ϕ) #λ = np.radians(np.array([λ0-Δλ, λ0, λ0+Δλ])) cosϕ[0] . 0.6129070536529766 . Ue = -1064.44 Uw = 1064.44 ΔU = Ue - Uw ΔU/np.radians(Δλ) . -21684.593615966347 . Vn = 78295.45 Vs = 74327.53 (Vn*cosϕ[0]-Vs*cosϕ[2])/np.radians(Δϕ) . -18554.98251712508 . divV = (1/(a*cosϕ[1])) * (ΔU/np.radians(Δλ) + (Vn*cosϕ[0]-Vs*cosϕ[2])/np.radians(Δϕ)) divV . -0.009916498688737384 . δp = -g*divV Δp = δp*Δt/100 Δp # hPa . 2.6212280983939524 .",
            "url": "https://prl900.github.io/comp_physics/2021/05/11/wpnp.html",
            "relUrl": "/2021/05/11/wpnp.html",
            "date": " • May 11, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://prl900.github.io/comp_physics/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://prl900.github.io/comp_physics/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Dr Pablo Rozas Larraondo . . . Bio . I am a reasearcher at the Australian National University combining how high performance computers and machine learning methodologies to represent and understand dynamic processes in the atmosphere and at the Earth’s surface using observed data. . Publications . P. Rozas Larraondo, I. Inza, and J. A. Lozano. A Method for Wind Speed Forecasting in Airports Based on Non-parametric Regression.Weather and Forecasting,29(6):1332–1342, 2014. | A. Salehi, J. Jimenez-Berni, D.M. Deery, D. Palmer, E. Holland, P. Rozas-Larraondo,S.C. Chapman, D. Georgakopoulos, and R.T. Furbank. SensorDB: a virtual laboratoryfor the integration, visualization and analysis of varied biological sensor data.PlantMethods, 11(8):53–59, 2015. | P. Rozas Larraondo, S. Pringle, J. Antony, and B. Evans. GSKY: An scalable distributed geospatial server.Proc. of the 4th Annual Conference of Research@Locate,1913:7–12, 2017. | P. Rozas Larraondo, J. Guo, S. Pringle, J. Antony, and B. Evans. GSio: Aprogrammatic interface for delivering Big Earth Data-as-a-Service.Submitted: Intl Journal of Big Earth Data, 2017. | P. Rozas Larraondo, I. Inza, and J.A. Lozano. A system for airport weather forecasting based on circular regression trees.Environmental Software &amp; Modeling,(100):24–32, 2018. | Marta Yebra, Xingwen Quan, David Riaño, Pablo Rozas Larraondo, Albert IJM vanDijk, and Geoffrey J Cary. A fuel moisture content and flammability monitoring methodology for continental australia based on optical remote sensing. RemoteSensing of Environment, 212:260–272, 2018. | Jose A. Jimenez-Berni, David M. Deery, Pablo Rozas Larraondo, Anthony (Tony) G.Condon, Greg J. Rebetzke, Richard A. James, William D. Bovill, Robert T. Furbank,and Xavier R. R. Sirault. High throughput determination of plant height, groundcover, and above-ground biomass in wheat with lidar.Frontiers in Plant Science,9:237, 2018. | P. Rozas Larraondo, Luigi J Renzullo, Inaki Inza, and Jose A Lozano. A data-driven approach to precipitation parameterizations using convolutional encoder-decoder neural networks.arXiv preprint arXiv:1903.10274, 2019. | P. Rozas Larraondo, L. J. Renzullo, A. IJM Van Dijk, I. Inza, and J. A. Lozano. Optimization of deep learning precipitation models using categorical binarymetrics.Journal of Advances in Modeling Earth Systems, 12(5):e2019MS001909,2020. | P. Rozas Larraondo, A. IJM Van Dijk. Decomposition of multispectral Sentinel-2 time series using neural networks for enhanced quality control, missing data imputation and compression. Science of Remote Sensing (submitted), 2021. | J. Taylor, P. Larraonndo, and B. de Supinski. Data-driven global weather predictions at high resolutions. (submitted) 2021. | This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://prl900.github.io/comp_physics/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://prl900.github.io/comp_physics/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}