{
  
    
        "post0": {
            "title": "Weather Prediction by Numerical Python",
            "content": "Intro . In 1922 Lewis Fry Richardson published a book that for the first time described how the dynamical processes in the atmosphere could be described with differential equations and solved using numerical methods. At that time computers did not exist and all the calculations had to be solved by hand. Nowadays, some of the largest computers in the world are dedicated to solve these same equations at speeds that Richardson could never have imagined. . This tutorial offers an introduction to numerical simulation using Richardson&#39;s book to ilustrate the fundamentals of weather forecasting and Python, to learn how these equations can be implemented and solved from scratch using simple standard libraries. . Barotropic model . Modeling the dynamics of the atmosphere is a complex subject. Scientist often use simplifications or assumptions to simplify and describe the atmospheric processes in a simpler and more manageable way. In a barotropic model, the assumption is that air density depends only on pressure, ignoring all other effects such as temperature or humidity. Barotropic models are conceptually simple and are easy to implement. Richardson, chose this model to perform the first numerical weather forecast at the beginning of the XXth century. The amount of time he spent to perform all the calculations required to generate a 12 hours weather forecast for Europe is unkown but the whole process span a few years. In this tutorial we are going to reproduce these calculations and condense this model to a few lines of Python code that can be run in less than a second. . Barotropic models use pressure as their only input. Differences in pressure between two points in space tend to compensate creating a flux of air that travels to fill the deficits in pressure balancing this field. The initial pressure situation chosen by Richardson to demostrate a barotropic model was a zonal wavenumber one perturbation given by: . $$p_s=10^4 sin^2 phi :cos phi :sin lambda$$ . Zonal wavenumber is a form of characterising pressure changes across the earth using sinusoidal functions. In this case, zonal wavenumber one, means that there is only one sinusoidal oscilation spanning the globe along longitudes. One in the northern and another one in the southern hemisphere. . This equation represents the change in the surface pressure field as a function of the latitude $ phi$ and longitude $ lambda$ . %matplotlib inline from IPython.display import Markdown as md import numpy as np from matplotlib import pyplot as plt ϕ = np.linspace(90,-90,181) λ = np.linspace(-180,180,361) λλ, ϕϕ = np.meshgrid(np.radians(λ),np.radians(ϕ)) ps = 10e4*(np.sin(ϕϕ)**2)*np.cos(ϕϕ)*np.sin(λλ) plt.figure(figsize=(12,6)) plt.contourf(λ,ϕ,ps, cmap=&#39;coolwarm&#39;) plt.colorbar() . &lt;matplotlib.colorbar.Colorbar at 0x7fd64a891160&gt; . Plotting a weather map . The previous figure shows two low pressure systems on the left and two high pressure systems on the right. Unfortunately, it is hard to see the correspondance of this example with the real world, so we are going to overlay a map to give more context and help ilustrating this example. . We use the Cartopy Python module to superimpose the coastlines on top of the previous figure and we are also representing the isobars, so it looks like a real weather map. . import cartopy.crs as ccrs plt.figure(figsize=(12,6)) ax = plt.axes(projection=ccrs.PlateCarree()) ax.coastlines() cs = ax.contour(λ,ϕ,ps, colors=[&#39;black&#39;]) ax.clabel(cs, inline=True, fontsize=10) ax.contourf(λ,ϕ,ps, cmap=&#39;coolwarm&#39;) plt.show() . Now we can clearly see where are the pressure systems in our system and also the isobars or lines connecting points with equal values of pressure. . However, we know the atmosphere is not static. In the absence of any external force, this system would quickly evolve to compensate the differences in pressure. Air would move from the right side of the figure to the left, creating a flow that crosses the center of the image and also wraps around the sides of the figure. . Note: Both sides of the figure represent the same date line in the middle of the Pacific ocean and air can flow between them. In order to understand how this system evolves, we need to derive the wind field corresponding to this pressure situation. From this pressure field we can calculate the gradient field and then derive wind as the flow crossing the gradient lines, although in the case of the Earth, this would be a poor reflection of reality. The Earth is nearly spherical and rotates around an axis which introduces coriolis forces that deviates the gradient flow from its natural perpendicular direction. . Geostrophic wind . Geostrophic wind is another simplification used by scientist to derive wind from pressure taking into account the Coriolis force. We use $U_g$ to denote the zonal or horizontal component and $V_g$ to denote the meridional or vertical components of the geostrophic wind. This components can be calculated with the following formulas: . $$Ug= frac{-1}{ rho f_c} frac{ Delta P}{ Delta y}$$ $$Ug= frac{1}{ rho f_c} frac{ Delta P}{ Delta x}$$ . $$U=-10^4 frac{h}{2 Omega a} (2sin^2 phi-cos^2 phi) :sin lambda$$ $$V=10^4 frac{h}{2 Omega a} sin phi :cos lambda$$ . %matplotlib notebook from mpl_toolkits.mplot3d import Axes3D import matplotlib.pyplot as plt fig = plt.figure() ax = fig.add_subplot(111, projection=&#39;3d&#39;) x =[1,2,3,4,5,6,7,8,9,10] y =[5,6,2,3,13,4,1,2,4,8] z =[2,3,3,3,5,7,9,11,9,10] ax.scatter(x, y, z, c=&#39;r&#39;, marker=&#39;o&#39;) ax.set_xlabel(&#39;X Label&#39;) ax.set_ylabel(&#39;Y Label&#39;) ax.set_zlabel(&#39;Z Label&#39;) plt.show() . import matplotlib.pyplot as plt from matplotlib import cm, colors from mpl_toolkits.mplot3d import Axes3D import numpy as np from scipy.special import sph_harm phi = np.linspace(0, np.pi, 100) theta = np.linspace(0, 2*np.pi, 100) phi, theta = np.meshgrid(phi, theta) # The Cartesian coordinates of the unit sphere x = np.sin(phi) * np.cos(theta) y = np.sin(phi) * np.sin(theta) z = np.cos(phi) m, l = 2, 3 # Calculate the spherical harmonic Y(l,m) and normalize to [0,1] fcolors = sph_harm(m, l, theta, phi).real fmax, fmin = fcolors.max(), fcolors.min() fcolors = (fcolors - fmin)/(fmax - fmin) # Set the aspect ratio to 1 so our sphere looks spherical fig = plt.figure(figsize=plt.figaspect(1.)) ax = fig.add_subplot(111, projection=&#39;3d&#39;) ax.plot_surface(x, y, z, rstride=1, cstride=1, facecolors=cm.seismic(fcolors)) # Turn off the axis planes #ax.set_axis_off() plt.show() . max_ϕi, max_λi = np.unravel_index(np.argmax(ps, axis=None), ps.shape) md(f&quot;This image represents two low pressure systems, centered on the western part of each hemisphere and two low pressure systems on the eastern half of the world. maxima of magnitude {ps.max()/1000:.1f} hPa at {λ[max_λi]} East and {ϕ[max_ϕi]} North and South, and corresponding minima in the western hemisphere at the antipodes of the maxima.&quot;) . This image represents two low pressure systems, centered on the western part of each hemisphere and two low pressure systems on the eastern half of the world. maxima of magnitude 38.5 hPa at 90.0 East and 55.0 North and South, and corresponding minima in the western hemisphere at the antipodes of the maxima. . plt.figure(figsize=(12,6)) #plt.contourf(λ,ϕ,(2*np.square(np.sin(ϕϕ))-np.square(np.cos(ϕϕ)))*np.sin(λλ), cmap=&#39;coolwarm_r&#39;) plt.contourf(λ,ϕ,-(2*(np.sin(ϕϕ)**2))-(np.cos(ϕϕ)**2), cmap=&#39;coolwarm_r&#39;) plt.colorbar() print(-10e4*(h/(Ω2*a))) . -990917.9336159385 . h = 9200 # Earth&#39;s angular velocity Ω2 = 1.458423e-4 # Earth&#39;s radius a = 6.366e6 U = -10e4*(h/(Ω2*a))*((2*np.square(np.sin(ϕϕ)))-np.square(np.cos(ϕϕ)))*np.sin(λλ) #U = 2*np.square(np.sin(ϕϕ))-np.square(np.cos(ϕϕ))*np.sin(λλ) plt.figure(figsize=(12,6)) plt.contourf(λ,ϕ,U, cmap=&#39;coolwarm_r&#39;) plt.colorbar() print(U.min(),U.argmax(), U.shape) np.unravel_index(np.argmax(U, axis=None), U.shape) . -1981835.867231877 90 (181, 361) . (0, 90) . To compute the tendency, we need the divergence on the black squares. For this, we require the zonal wind in the white squares to the east and west, and the meridional wind in the white squares to the north and south of each black square. . $$ frac{ partial P}{ partial t} + gh nabla cdot V = 0$$ . $$ frac{ partial P}{ partial t} + frac{gh}{a :cos phi} left( frac{ Delta U}{ Delta lambda}+ frac{ Delta (V cos phi)}{ Delta phi} right)=0$$ . g = 9.79 # Earth&#39;s angular velocity Ω = 1.458423e-4/2 # Earth&#39;s radius a = 6.366e6 λ0 = 0 ϕ0 = 50.4 Δλ = 5.625 Δϕ = 3.6 Δt = 2700 #3/4 hour ϕ = np.radians(np.array([ϕ0+Δϕ/2, ϕ0, ϕ0-Δϕ/2])) cosϕ = np.cos(ϕ) #λ = np.radians(np.array([λ0-Δλ, λ0, λ0+Δλ])) cosϕ[0] . 0.6129070536529766 . Ue = -1064.44 Uw = 1064.44 ΔU = Ue - Uw ΔU/np.radians(Δλ) . -21684.593615966347 . Vn = 78295.45 Vs = 74327.53 (Vn*cosϕ[0]-Vs*cosϕ[2])/np.radians(Δϕ) . -18554.98251712508 . divV = (1/(a*cosϕ[1])) * (ΔU/np.radians(Δλ) + (Vn*cosϕ[0]-Vs*cosϕ[2])/np.radians(Δϕ)) divV . -0.009916498688737384 . δp = -g*divV Δp = δp*Δt/100 Δp # hPa . 2.6212280983939524 .",
            "url": "https://prl900.github.io/comp_physics/jupyter/2021/05/11/wpnp.html",
            "relUrl": "/jupyter/2021/05/11/wpnp.html",
            "date": " • May 11, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://prl900.github.io/comp_physics/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Dr Pablo Rozas Larraondo . Bio . . I am a reasearcher at the Australian National University combining how high performance computers and machine learning methodologies to represent and understand dynamic processes in the atmosphere and at the Earth’s surface using observed data. . . Publications . P. Rozas Larraondo, I. Inza, and J. A. Lozano. A Method for Wind Speed Forecasting in Airports Based on Non-parametric Regression.Weather and Forecasting,29(6):1332–1342, 2014. | A. Salehi, J. Jimenez-Berni, D.M. Deery, D. Palmer, E. Holland, P. Rozas-Larraondo,S.C. Chapman, D. Georgakopoulos, and R.T. Furbank. SensorDB: a virtual laboratoryfor the integration, visualization and analysis of varied biological sensor data.PlantMethods, 11(8):53–59, 2015. | P. Rozas Larraondo, S. Pringle, J. Antony, and B. Evans. GSKY: An scalable distributed geospatial server.Proc. of the 4th Annual Conference of Research@Locate,1913:7–12, 2017. | P. Rozas Larraondo, J. Guo, S. Pringle, J. Antony, and B. Evans. GSio: Aprogrammatic interface for delivering Big Earth Data-as-a-Service.Submitted: Intl Journal of Big Earth Data, 2017. | P. Rozas Larraondo, I. Inza, and J.A. Lozano. A system for airport weather forecasting based on circular regression trees.Environmental Software &amp; Modeling,(100):24–32, 2018. | Marta Yebra, Xingwen Quan, David Riaño, Pablo Rozas Larraondo, Albert IJM vanDijk, and Geoffrey J Cary. A fuel moisture content and flammability monitoring methodology for continental australia based on optical remote sensing. RemoteSensing of Environment, 212:260–272, 2018. | Jose A. Jimenez-Berni, David M. Deery, Pablo Rozas Larraondo, Anthony (Tony) G.Condon, Greg J. Rebetzke, Richard A. James, William D. Bovill, Robert T. Furbank,and Xavier R. R. Sirault. High throughput determination of plant height, groundcover, and above-ground biomass in wheat with lidar.Frontiers in Plant Science,9:237, 2018. | P. Rozas Larraondo, Luigi J Renzullo, Inaki Inza, and Jose A Lozano. A data-driven approach to precipitation parameterizations using convolutional encoder-decoder neural networks.arXiv preprint arXiv:1903.10274, 2019. | P. Rozas Larraondo, L. J. Renzullo, A. IJM Van Dijk, I. Inza, and J. A. Lozano. Optimization of deep learning precipitation models using categorical binarymetrics.Journal of Advances in Modeling Earth Systems, 12(5):e2019MS001909,2020. | P. Rozas Larraondo, A. IJM Van Dijk. Decomposition of multispectral Sentinel-2 time series using neural networks for enhanced quality control, missing data imputation and compression. Science of Remote Sensing (submitted), 2021. | J. Taylor, P. Larraonndo, and B. de Supinski. Data-driven global weather predictions at high resolutions. (submitted) 2021. | This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://prl900.github.io/comp_physics/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://prl900.github.io/comp_physics/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}